name: Web Application CI/CD Workflow

on:
  push:
    tags:
      - 'v*.*.*' # trigger on semantic versioning tags (e.g., v1.0.0)
  workflow_dispatch: # allows manual trigger of the workflow

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      
      - name: Cache pip dependencies # cache pip dependencies
        # this step caches the pip dependencies to speed up the workflow
        uses: actions/cache@v4
        with: 
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python-version || '3.8' }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version || '3.8' }}-
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          pip install -r requirements.txt

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # fetch all history for all branches and tags

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Docker meta
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ghcr.io/${{ github.repository_owner }}/flask-ci-cd
          tags: |
            type=sha,prefix=,suffix=,format=short
            type=ref,event=tag

      - name: Build and push Docker image using Actions
        uses: docker/build-push-action@v6
        with:
          context: .
          file: ./dockerfile
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Run Docker container
        run: |
          docker run -d --name flask-container -p 5001:5001 ghcr.io/${{ github.repository_owner }}/flask-ci-cd:${{ steps.meta.outputs.version }}

      - name: Wait for the container to start
        run: sleep 10 # wait for the container to start

      - name: Health check for the container
        uses: jtalk/url-health-check-action@v4
        with:
          url: http://localhost:5001
          max-attempts: 15
          retry-delay: 3s

      - name: Stop Docker container
        run: |
          echo "Stopping the container..."
          docker stop flask-container
          docker rm flask-container

  cleanup:
    needs: build-and-push # ensure cleanup runs after build-and-push
    runs-on: ubuntu-latest
    permissions: 
      packages: write # required to delete images
    steps:
      - name: Delete old container image versions (keep 3 latest) 
        uses: actions/delete-package-versions@v5 
        with:
          package-name: 'flask-ci-cd'        
          package-type: 'container'          
          min-versions-to-keep: 3            
          ignore-versions: 'latest'              
          delete-only-untagged-versions: false      
          token: ${{ secrets.GITHUB_TOKEN }}