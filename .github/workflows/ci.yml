name: Web Application CI/CD Workflow

on:
  workflow_dispatch: # allows manual trigger of the workflow

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set image tag
        run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker build -t ghcr.io/${{ github.repository_owner }}/flask-ci-cd:${{ env.IMAGE_TAG }} . 
          docker push ghcr.io/${{ github.repository_owner }}/flask-ci-cd:${{ env.IMAGE_TAG }}

      - name: Tag latest (optional)
        run: |
          docker tag ghcr.io/${{ github.repository_owner }}/flask-ci-cd:${{ env.IMAGE_TAG }} ghcr.io/${{ github.repository_owner }}/flask-ci-cd:latest
          docker push ghcr.io/${{ github.repository_owner }}/flask-ci-cd:latest

      - name: Run Docker container
        run: |
          docker run -d --name flask-container -p 5001:5001 ghcr.io/${{ github.repository_owner }}/flask-ci-cd:${{ env.IMAGE_TAG }}

      - name: Verify Docker container is running
        run: |
          echo "Waiting for the container to start..."
          sleep 5
          echo "Checking container logs for debugging:"
          docker logs flask-container
          curl --fail http://localhost:5001 || (echo "Container is not running!" && exit 1)

      - name: Stop Docker container
        run: |
          echo "Stopping the container..."
          docker stop flask-container
          docker rm flask-container

  cleanup:
    needs: build-and-push # ensure cleanup runs after build-and-push
    runs-on: ubuntu-latest
    permissions: 
      packages: write # required to delete images
    steps:
      - name: Delete old container image versions (keep 3 latest) 
        uses: actions/delete-package-versions@v5 
        with:
          package-name: 'flask-ci-cd'        
          package-type: 'container'          
          min-versions-to-keep: 3            
          ignore-tags: 'latest'              
          delete-untagged-versions: true      
          token: ${{ secrets.GITHUB_TOKEN }}