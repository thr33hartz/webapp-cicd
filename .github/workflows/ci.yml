name: Web Application CI/CD Workflow

on:
  tags:
    - 'v*.*.*' # trigger on version tags
  workflow_dispatch: # allows manual trigger of the workflow

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.8'
      
      - name: Cache pip dependencies # cache pip dependencies
        # this step caches the pip dependencies to speed up the workflow
        uses: actions/cache@v4
        with: 
          path: ~/.cache/pip
          key: ${{ runner.os }}-python-${{ matrix.python-version || '3.8' }}-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-python-${{ matrix.python-version || '3.8' }}-
            ${{ runner.os }}-python-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to GitHub Container Registry
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin

      - name: Set image tag from git SHA
        run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Extract Git tag name (if triggered by tag)
        id: get_git_tag
        if: startsWith(github.ref, 'refs/tags/v')
        run: echo "value=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Build and push Docker image
        run: |
          IMAGE_ID=ghcr.io/${{ github.repository_owner }}/flask-ci-cd 
          GIT_TAG="${{ steps.get_git_tag.outputs.value }}"
          
          echo "Building Docker image $IMAGE_ID:${{ env.IMAGE_TAG }}"
          docker build -t $IMAGE_ID:${{ env.IMAGE_TAG }} .

          echo "Pushing image $IMAGE_ID:${{ env.IMAGE_TAG }}"
          docker push $IMAGE_ID:${{ env.IMAGE_TAG }}

          if [[ -n "$GIT_TAG" ]]; then
            echo "Workflow triggered by Git tag: $GIT_TAG"
            # Tag the same image (identified by SHA tag) with the Git tag
            echo "Tagging $IMAGE_ID:${{ env.IMAGE_TAG }} as $IMAGE_ID:$GIT_TAG"
            docker tag $IMAGE_ID:${{ env.IMAGE_TAG }} $IMAGE_ID:$GIT_TAG
            # Push the Git tag
            echo "Pushing image $IMAGE_ID:$GIT_TAG"
            docker push $IMAGE_ID:$GIT_TAG
          else
            echo "Workflow not triggered by a v* tag push. Skipping Git tag push."
          fi

      - name: Run Docker container
        run: |
          docker run -d --name flask-container -p 5001:5001 ghcr.io/${{ github.repository_owner }}/flask-ci-cd:${{ env.IMAGE_TAG }}

      - name: Verify Docker container is running
        run: |
          echo "Waiting for the container to start..."
          sleep 5
          echo "Checking container logs for debugging:"
          docker logs flask-container
          curl --fail http://localhost:5001 || (echo "Container is not running!" && exit 1)

      - name: Stop Docker container
        run: |
          echo "Stopping the container..."
          docker stop flask-container
          docker rm flask-container

  cleanup:
    needs: build-and-push # ensure cleanup runs after build-and-push
    runs-on: ubuntu-latest
    permissions: 
      packages: write # required to delete images
    steps:
      - name: Delete old container image versions (keep 3 latest) 
        uses: actions/delete-package-versions@v5 
        with:
          package-name: 'flask-ci-cd'        
          package-type: 'container'          
          min-versions-to-keep: 3            
          ignore-versions: 'latest'              
          delete-only-untagged-versions: false      
          token: ${{ secrets.GITHUB_TOKEN }}