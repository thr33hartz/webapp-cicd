name: Web Application CI/CD Workflow

on:
  workflow_dispatch: # allows manual trigger of the workflow
  schedule:
    - cron: "0 0 * * *" # runs daily at midnight UTC

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.8'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        env:
          PYTHONPATH: ${{ github.workspace }}
        run: |
          pytest

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Set image tag
        run: echo "IMAGE_TAG=${GITHUB_SHA::7}" >> $GITHUB_ENV

      - name: Build and push Docker image
        run: |
          docker build -t ${{ secrets.DOCKER_USERNAME }}/flask-ci-cd:${{ env.IMAGE_TAG }} . 
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-ci-cd:${{ env.IMAGE_TAG }}

      - name: Tag latest (optional)
        run: |
          docker tag ${{ secrets.DOCKER_USERNAME }}/flask-ci-cd:${{ env.IMAGE_TAG }} ${{ secrets.DOCKER_USERNAME }}/flask-ci-cd:latest
          docker push ${{ secrets.DOCKER_USERNAME }}/flask-ci-cd:latest

      - name: Run Docker container
        run: |
          docker run -d --name flask-container -p 5001:5001 ${{ secrets.DOCKER_USERNAME }}/flask-ci-cd:${{ env.IMAGE_TAG }}

      - name: Verify Docker container is running
        run: |
          echo "Waiting for the container to start..."
          sleep 5
          echo "Checking container logs for debugging:"
          docker logs flask-container
          curl --fail http://localhost:5001 || (echo "Container is not running!" && exit 1)

      - name: Stop Docker container
        run: |
          echo "Stopping the container..."
          docker stop flask-container
          docker rm flask-container

  cleanup:
    needs: build-and-push # ensure cleanup runs after build-and-push
    runs-on: ubuntu-latest
    steps:
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Clean up old Docker images
        run: |
          echo "Fetching image list..."
          images=$(curl -s -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" \
            "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/flask-ci-cd/tags/" | jq -r '.results[].name' | grep -v latest)

          echo "Deleting old images..."
          for image in $images; do
            curl -s -X DELETE -u "${{ secrets.DOCKER_USERNAME }}:${{ secrets.DOCKER_PASSWORD }}" \
              "https://hub.docker.com/v2/repositories/${{ secrets.DOCKER_USERNAME }}/flask-ci-cd/tags/$image/"
            echo "Deleted $image"
          done